# NMS Stuff
# By: ShaneBee

# This snippet just provides some quick NMS things
# Requirements: Skript-Reflect

#! OPEN TERRAIN LOADING SCREEN !#
# This will open the terrain loading screen to a player
# It will automatically close after 30 seconds
# You can manually close it by using the close inventory effect
# Requires Paper 1.20.6+
import:
	net.minecraft.network.protocol.game.ClientboundRespawnPacket

effect open loading terrain screen for %players%:
	trigger:
		loop exprs-1:
			set {_level} to loop-value.getWorld().getHandle()
			set {_common} to loop-value.getHandle().createCommonSpawnInfo({_level})
			set {_packet} to new ClientboundRespawnPacket({_common}, 3)
			loop-value.getHandle().connection.send({_packet})


#! FULL VANILLA NBT !#
# This expression will return vanilla item components in NBT
# This includes all the default components an item has that doesn't normally show in NBT
# Requires Paper 1.20.6+, SkBee
import:
	net.minecraft.nbt.NbtOps
	net.minecraft.core.component.DataComponentMap
	net.minecraft.nbt.CompoundTag
	com.shanebeestudios.skbee.api.nbt.NBTContainer

expression [:full] vanilla nbt of %itemtype%:
	get:
		set {_i} to expr-1.getRandom().handle
		set {_ra} to (world "world").getHandle().registryAccess()
		set {_c} to DataComponentMap.CODEC.encode({_i}.getComponents(), {_ra}.createSerializationContext(NbtOps.INSTANCE), new CompoundTag()).getOrThrow()
		set {_comp} to new NBTContainer({_c})
		if parse tags contains "full":
			set {_nbt} to full nbt of expr-1
			set compound tag "components" of {_nbt} to {_comp}
			return {_nbt}
		else:
			return {_comp}

#! VANILLA MINECRAFT NBT OF CHUNK !#
# This will return the nbt of a chunk how Minecraft would save a chunk
# This differs from SkBee's `nbt of %chunk%` as it will provide all data in a chunk
# Requires Paper 1.20.6+, SkBee
import:
	net.minecraft.world.level.chunk.status.ChunkStatus
	net.minecraft.world.level.chunk.storage.ChunkSerializer
	com.shanebeestudios.skbee.api.nbt.NBTContainer

expression minecraft nbt of %chunk%:
	get:
		set {_chunk} to expr-1
		set {_nmsChunk} to {_chunk}.getHandle(ChunkStatus.FULL)
		set {_level} to {_chunk}.worldServer
		set {_nmsNBT} to ChunkSerializer.write({_level}, {_nmsChunk})
		set {_nbt} to new NBTContainer({_nmsNBT})
		return {_nbt}
