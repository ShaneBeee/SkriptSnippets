# Functions
# By: Shane Bee

# This is a set of random functions for you to use

# Round a timespam (generally will round the seconds)
function roundTimespan(t: timespan) :: timespan:
	set {_a::*} to "%{_t}%" split at " "
	loop {_a::*}:
		set {_n} to loop-value parsed as a number
		if {_n} is set:
			set {_a::%loop-index%} to "%round({_n})%"
	set {_a} to join {_a::*} using " "
	return {_a} parsed as timespan

# Round a timespam down (generally will round the seconds)
function floorTimespan(t: timespan) :: timespan:
	set {_a::*} to "%{_t}%" split at " "
	loop {_a::*}:
		set {_n} to loop-value parsed as a number
		if {_n} is set:
			set {_a::%loop-index%} to "%floor({_n})%"
	set {_a} to join {_a::*} using " "
	return {_a} parsed as timespan

# Round a timespam up (generally will round the seconds)
function ceilTimespan(t: timespan) :: timespan:
	set {_a::*} to "%{_t}%" split at " "
	loop {_a::*}:
		set {_n} to loop-value parsed as a number
		if {_n} is set:
			set {_a::%loop-index%} to "%ceil({_n})%"
	set {_a} to join {_a::*} using " "
	return {_a} parsed as timespan

# Progress Bar
# percent = percent along the bar (from 0 to 100)
# bars = the number of bars to show
function progress(percent: number, bars: number) :: string:
	set {_g} to floor(({_percent} / 100) * {_bars})
	set {_r} to {_bars} - {_g}
	set {_g} to "&a|" repeated {_g} times if {_g} > 0 else ""
	set {_r} to "&c|" repeated {_r} times if {_r} > 0 else ""
	return "%{_g}%%{_r}%"

#! ITEM WITH HIDDEN ATTRIBUTE MODIFIERS !#
# This snippet helps fix an issue relating to MC 1.20.5+
# Requires SkBee and skript-reflect

expression %itemtype% with hidden attributes:
	get:
		set {_i} to expr-1.getRandom()
		set {_meta} to {_i}.getItemMeta()
		{_meta}.addItemFlags(hide attributes)
		set {_map} to {_i}.getType().getDefaultAttributeModifiers()
		loop ...{_map}.keySet():
			{_meta}.addAttributeModifier(loop-value, {_map}.get(loop-value).get(0))

		{_i}.setItemMeta({_meta})
		return {_i}

# example usage
on join:
	give player diamond sword with hidden attributes

#! FORMATTED TIMESPAN !#
# this will format a timespan like 1d, 3h, 10m, 1s
# Modify to your loking

function time(time: timespan) :: string:
	set {_time} to "%{_time}%"
	replace " and " with ", " in {_time}
	replace " days" and " day" with "d" in {_time}
	replace " hours" and " hour" with "h" in {_time}
	replace " minutes" and " minute" with "m" in {_time}
	replace " seconds" and " second" with "s" in {_time}
	set {_time} to {_time}.replaceAll("\.\d+", "")

	return {_time}
